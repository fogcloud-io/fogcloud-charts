# fogcloud-web-service
apiVersion: v1
kind: Service
metadata:
  labels:
{{ include "fogcloud.labels" . | indent 4 }}  
    srv: fogcloud-web
  name: fogcloud-web
  
spec:
  {{ if eq .Values.expose.type "Ingress" }}
  type: ClusterIP
  {{ else if eq .Values.expose.type "LoadBalancer" }}
  type: NodePort
  {{ else }}
  type: {{ .Values.expose.type }}
  {{ end }}
  {{ if eq .Values.expose.type "LoadBalancer" }}
  externalTrafficPolicy: {{ .Values.expose.LoadBalancer.externalTrafficPolicy }}
  ports:
    - name: http
      port: 80
      targetPort: 8000
      nodePort: {{ .Values.expose.LoadBalancer.ports.webAdmin.httpPort }}
  {{ end }} 
  {{ if eq .Values.expose.type "NodePort" }}
  externalTrafficPolicy: {{ .Values.expose.NodePort.externalTrafficPolicy }}
  ports:
    - name: http
      port: 80
      targetPort: 8000
      nodePort: {{ .Values.expose.NodePort.ports.webAdmin.httpPort }}
  {{ end }}   
  {{ if or (eq .Values.expose.type "Ingress") (eq .Values.expose.type "ClusterIP") }}
  ports:
    - name: http
      port: 80
      targetPort: 8000
  {{ end }}   
  selector:
    app: fogcloud-web
status:
  loadBalancer: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
{{ include "fogcloud.labels" . | indent 4 }}  
    component: fogcloud-web
  name: fogcloud-web
  
spec:
  replicas: {{ .Values.fogcloudWeb.replicas }}
  selector:
    matchLabels:
      app: fogcloud-web
  strategy:
    type: {{ .Values.fogcloudWeb.strategy.type }}
    {{ if eq .Values.fogcloudWeb.strategy.type "RollingUpdate" }}
    rollingUpdate:
      maxSurge: {{ .Values.fogcloudWeb.strategy.rollingUpdate.maxSurge | default "50%" }}
      maxUnavailable: {{ .Values.fogcloudWeb.strategy.rollingUpdate.maxUnavailable | default 0 }}
    {{ end }}
  template:
    metadata:
      labels:
        app: fogcloud-web
    spec:
      containers:
        - image: {{ .Values.fogcloudWeb.image }}:{{ .Values.fogcloudWeb.imageTag }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          name: fogcloud-web
          env:
            {{ if .Values.expose.tls.enabled }} 
            - name: API_BASE_URL
              value: "https://{{ .Values.expose.hosts.api }}"
            - name: MQTT_BASE_URL
              value: "wss://{{ .Values.expose.hosts.mqtt }}/mqtt"                
            {{ else }}
            - name: API_BASE_URL
              value: "http://{{ .Values.expose.hosts.api }}"
            - name: MQTT_BASE_URL
              value: "ws://{{ .Values.expose.hosts.mqtt }}/mqtt"          
            {{ end }}
            {{ if .Values.cloudGatewayEnabled }}
            - name: "GATEWAY_CLOUD_STATUS"
              value: "true"          
            {{ end }}
            {{ range $fields := .Values.fogcloudWeb.envVars }}
            - name: {{ $fields.name }}
              value: "{{ $fields.value }}"
            {{ end }}            
          {{- if .Values.fogcloudWeb.resources }}
          resources:
{{ toYaml .Values.fogcloudWeb.resources | indent 12 }}
          {{- end }}            
          ports:
            - containerPort: 80
            - containerPort: 443
          volumeMounts:
            - mountPath: /etc/nginx/conf.d/default.conf
              subPath: default.conf
              name: nginx-claim
      imagePullSecrets:
        {{ range $_, $secret := .Values.secret.imageCredentials }}
        - name: {{ $secret.name }}
        {{ end }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app: fogcloud-web
                topologyKey: "kubernetes.io/hostname"
              weight: 100                          
      volumes:
        - name: nginx-claim
          configMap:
            name: nginx-web-config
            items:
              - key: default.conf
                path: default.conf
status: {}
