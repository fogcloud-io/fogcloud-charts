# fogcloud-service
{{ $app := .Values.fogcloud }}
{{ $appName := "fogcore" }}
{{ $svcType := .Values.fogcloud.service.type | default "ClusterIP" }}
apiVersion: v1
kind: Service
metadata:
  annotations:
  labels:
    srv: fogcloud
{{ include "fogcloud.labels" . | indent 4 }}
  name: fogcloud
  
spec:
  type: {{ $svcType }}
  {{ if or (eq $svcType "NodePort") (eq $svcType "LoadBalancer") }}
  externalTrafficPolicy: {{ $app.service.externalTrafficPolicy }}
    {{ if and (eq $app.service.externalTrafficPolicy "Local") (eq $svcType "LoadBalancer") }}
  healthCheckNodePort: {{ $app.service.healthCheckNodePort }}
    {{ end }}
  {{ end }}
  ports:
    - name: "http"
      port: {{ $app.config.HTTP_LISTEN | default ":4000" |  trimPrefix ":" | atoi }}
      targetPort: {{ $app.config.HTTP_LISTEN | default ":4000" |  trimPrefix ":" | atoi }}
      {{ if or (eq $svcType "NodePort") (eq $svcType "LoadBalancer") }}
      nodePort: {{ $app.service.ports.http.nodePort }}
      {{ end }}
    - name: "grpc"
      port: {{ $app.config.GRPC_LISTEN | default ":4001" |  trimPrefix ":" | atoi }}
      targetPort: {{ $app.config.GRPC_LISTEN | default ":4001" |  trimPrefix ":" | atoi }}
      {{ if or (eq $svcType "NodePort") (eq $svcType "LoadBalancer") }}
      nodePort: {{ $app.service.ports.grpc.nodePort }}
      {{ end }}
    - name: "pprof"
      port: 15000
      targetPort: 15000
  selector:
    app: fogcloud
status:
  loadBalancer: {}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: core
{{ include "fogcloud.labels" . | indent 4 }}
  name: fogcloud-core
  
spec:
  replicas: {{ $app.replicas }}
  selector:
    matchLabels:
      app: fogcloud
  strategy:
    type: {{ $app.strategy.type }}
    {{ if eq $app.strategy.type "RollingUpdate" }}
    rollingUpdate:
      maxSurge: {{ $app.strategy.rollingUpdate.maxSurge | default "50%" }}
      maxUnavailable: {{ $app.strategy.rollingUpdate.maxUnavailable | default 0 }}
    {{ end }}

  template:
    metadata:
      annotations:
      labels:
        app: fogcloud
    spec:
      containers:
        - args:
            - fogcloud
            - -c
            - /etc/fogcloud/fogcloud.yaml
            - -e
            - {{ .Values.environment }}
          image: {{ $app.image }}:{{ $app.imageTag }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          name: fogcloud-core
          {{- if $app.resources }}
          resources:
{{ toYaml $app.resources | indent 12 }}
          {{- end }}
          ports:
            - containerPort: 4000
            - containerPort: 15000
          env:
            - name: FOG_ENABLE_TLS
              value: "{{ .Values.expose.tls.enabled }}"
            {{ if eq .Values.mqttBroker.type "internal" }}
            - name: FOG_MQTT_BROKER_ID
              value: "{{ .Values.mqttBroker.internal.defaultUsername }}"
            - name: FOG_MQTT_BROKER_SECRET
              value: "{{ .Values.mqttBroker.internal.defaultPassword }}"
            - name: FOG_MQTT_DASHBOARD_USERNAME
              value: "{{ .Values.mqttBroker.internal.dashboardUsername }}"
            - name: FOG_MQTT_DASHBOARD_PASSWORD
              value: "{{ .Values.mqttBroker.internal.dashboardPassword }}"
            {{ end }}  
            {{ if eq .Values.rabbitmq.type "internal" }}
            - name: FOG_RABBITMQ_USER
              value: "{{ .Values.rabbitmq.internal.defaultUsername }}"
            - name: FOG_RABBITMQ_PASSWORD
              value: "{{ .Values.rabbitmq.internal.defaultPassword }}"
            {{ end }}
            {{ if .Values.cloudGatewayEnabled }}
            - name: FOG_ENABLE_CLOUD_GATEWAY 
              value: "true"
            {{ end }}
            {{ if .Values.telemetryEnabled }}
            - name: FOG_ENABLE_TELEMETRY 
              value: "true"            
            {{ end }}          
            {{ range $fields := $app.envVars }}
            - name: {{ $fields.name }}
              value: "{{ $fields.value }}"
            {{ end }}
            - name: FOG_DISABLE_TDENGINE_HISTORY_SAVE
              value: "{{ not .Values.tdengineEnabled }}"
          volumeMounts:
            - mountPath: /etc/fogcloud/fogcloud.yaml
              subPath: fogcloud.yaml
              name: fogcloud-claim
            - mountPath: /etc/fogcloud/topics.yaml
              subPath: topics.yaml
              name: topics-claim
      restartPolicy: {{ $app.restartPolicy }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app: fogcloud
                topologyKey: "kubernetes.io/hostname"
              weight: 100                 
      imagePullSecrets:
        {{ range $_, $secret := .Values.secret.imageCredentials }}
        - name: {{ $secret.name }}
        {{ end }}
      volumes:
        - name: fogcloud-claim
          configMap:
            name: {{ $appName }}-config
            items:
              - key: config.yaml
                path: fogcloud.yaml
        - name: topics-claim
          configMap:
            name: fogcore-topics-config
            items:
              - key: topics.yaml
                path: topics.yaml
status: {}
