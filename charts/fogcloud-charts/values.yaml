# Default values for fogcloud-charts.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

namespace: fogcloud-dev
# 配置文件环境：development,test,production
environment: production

imagePullPolicy: Always

k8sApiServer: "https://localhost:6443"
# 是否启用云函数功能，若安装了fission可以设置为true
fissionEnabled: false

# 暴露web管理后台和api服务，有：Ingress, ClusterIP, NodePort, LoadBalancer这几种类型；
# 若要公开服务，请使用LoadBalancer,Ingress,NodePort三种类型
expose:
  type: Ingress
  # 各个服务的域名，若启用对应服务的tls，请保证域名是外网可以访问的；
  hosts:
    # web管理后台域名
    webAdmin: localhost
    # 后端api服务域名
    api: localhost
    # mqtt服务域名
    mqtt: localhost
    # amqp服务域名
    amqp: localhost
  
  tls:
    enabled: false
    cert:
      webAdmin:
        # x509证书创建方式，支持file, auto, none这三种方式
        # file: 通过文件创建，可将对应证书文件：*.key，*.crt，放到fogcloud-charts/configs/cert/webAdmin目录下
        # none: 不创建
        # auto: 使用cert-manager自动生成
        certSource: none
        secretName: web-cert    
      api:
        certSource: none
        secretName: api-cert

  Ingress:
    className: traefik
    controller: traefik.io/ingress-controller
    annotations: {}

  NodePort:
    externalTrafficPolicy: Local
    ports:
      webAdmin:
        httpPort: 8888
      api:
        httpPort: 8000

  LoadBalancer:
    externalTrafficPolicy: Local
    healthCheckNodePort: 4000
    ports:
      webAdmin:
        httpPort: 8888
      api:
        httpPort: 8000  
        
secret:
  # 配置私有镜像仓库    
  imageCredentials:
    # - registry:
    #   name:
    #   username:
    #   password:
    #   email:

storageClassName: "local-path"

resourceRangeLimit:
  limits:
  - default:
      memory: "512Mi"
      cpu: "0.5"
    defaultRequest:
      memory: "256Mi"
      cpu: "0.1"
    min:
      memory: "128Mi"
      cpu: "0.1"
    max:  
      memory: "4Gi"
      cpu: "2"
    type: Container    

fogcloud:
  restartPolicy: Always
  image: ghcr.io/fogcloud-io/fogcloud
  imageTag: latest
  replicas: 1
  strategy: 
    type: RollingUpdate # enum: Recreate, RollingUpdate
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 0
  resources:
    # limits:
    #   cpu: "2"
    #   memory: "128Mi"

fogcloudWeb:
  image: ghcr.io/fogcloud-io/fogcloud-web
  imageTag: latest
  replicas: 1
  strategy: 
    type: RollingUpdate # enum: Recreate, RollingUpdate
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 0
  resources:
    # limits:
    #   cpu: "1"
    #   memory: "128Mi"

faasbuilder:
  image: ghcr.io/fogcloud-io/faas-builder
  imageTag: latest
  createDockerconfigWithFile: false
  replicas: 1
  resources:
    # limits:
    #   cpu: "0.1"
    #   memory: "128Mi"  
  strategy: 
    type: RollingUpdate # enum: Recreate, RollingUpdate
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 0

fogcronScheduler:
  image: ghcr.io/fogcloud-io/fogcron-scheduler
  imageTag: latest
  replicas: 1
  resources:
    # limits:
    #   cpu: "1"
    #   memory: "128Mi"  
  strategy: 
    type: RollingUpdate # enum: Recreate, RollingUpdate
    rollingUpdate:
      maxSurge: 50%
      maxUnavailable: 0    

nginx:
  image: nginx
  imageTag: 1.21
  replicas: 1
  resources:
    # limits:
    #   cpu: "1"
    #   memory: "128Mi"  

mqttBroker:
  enabled: true
  type: emqx
  image: emqx/emqx
  imageTag: 4.2.8
  resources:
    # limits:
    #   cpu: "4"
    #   memory: "2048Mi"  
  nodeSelector:
    enabled: false
    key: kubernetes.io/hostname
    value: fogcloud-prod1
  replicas: 1
  tls:
    enabled: false
    certSource: none # file, auto, none
    secretName: mqtt-cert
  service:
    type: ClusterIP
    externalTrafficPolicy: Local
    healthCheckNodePort: 30000
    ports:
      mqttTcp:
        port: 1883
        targetPort: 1883
        nodePort: 1883
      mqttTcpTls:
        port: 8883
        targetPort: 8883
        nodePort: 8883
      httpApi:
        port: 8081
        targetPort: 8081
        nodePort: 8081
      mqttWs:
        port: 8083
        targetPort: 8083
        nodePort: 8083
      mqttWss:
        port: 8084
        targetPort: 8084
        nodePort: 8084
      admin:
        port: 18083
        targetPort: 18083
        nodePort: 18083        

rabbitmq:
  enabled: true
  image: rabbitmq
  imageTag: 3.8.0-management
  resources:
    # limits:
    #   cpu: "2"
    #   memory: "1024Mi"  
  tls:
    enabled: false
    certSource: none # file, auto, none 
    secretName: amqp-cert
  service:
    externalTrafficPolicy: Local
    healthCheckNodePort: 30001
    type: ClusterIP
    ports:
      - name: "amqp"
        port: 5672
        targetPort: 5672
        nodePort: 5672
      - name: "amqp-tls"
        port: 5671
        targetPort: 5671
        nodePort: 5671
      - name: "dasboard"
        port: 15672
        targetPort: 15672

postgres:
  enabled: true
  image: postgres
  imageTag: 13
  resources:
    # limits:
    #   cpu: "4"
    #   memory: "2048Mi"  
  envVars:
    - name: POSTGRES_DB
      value: fogcloud
    - name: POSTGRES_PASSWORD
      value: fogcloud
    - name: POSTGRES_USER
      value: postgres

mongodb:
  enabled: true
  image: mongo  
  imageTag: 4.4-rc-focal
  resources:
    # limits:
    #   cpu: "2"
    #   memory: "2048Mi"  
  envVars:

redis:
  enabled: true
  image: redis
  imageTag: 6.2
  resources:
    # limits:
    #   cpu: "2"
    #   memory: "2048Mi"  
  envVars:

etcd:
  enabled: true
  image: bitnami/etcd
  imageTag: 3.5.1
  resources:
    # limits:
    #   cpu: "1"
    #   memory: "128Mi"  
  replicas: 1
  envVars:
    - name: ALLOW_NONE_AUTHENTICATION
      value: "yes"
    - name: ETCD_ADVERTISE_CLIENT_URLS
      value: "http://etcd1:2379"
    - name: ETCD_LISTEN_CLIENT_URLS
      value: "http://0.0.0.0:2379"

minio:
  enabled: true
  image: minio/minio
  imageTag: latest
  resources:
    # limits:
    #   cpu: "1"
    #   memory: "128Mi"  
  envVars:
    - name: MINIO_ACCESS_KEY
      value: "1234567890"
    - name: MINIO_REGION_NAME
      value: "cn-south-1"
    - name: MINIO_ROOT_PASSWORD
      value: "fogcloud"
    - name: MINIO_ROOT_USER
      value: "minio"
    - name: MINIO_SECRET_KEY
      value: "abcdefghi"